==== This file tests the integer_validator() method of the BaseGeometry class.

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

==== Test for expected behaviour ====

>>> bg = BaseGeometry()

>>> bg.integer_validator("square", 5)
>>> bg.integer_validator("integer_pi", 3)


==== Test for string as values ====

>>> bg.integer_validator("name", "John Doe")
Traceback (most recent call last):
...
TypeError: name must be an integer

>>> bg.integer_validator("pi", "3.14")
Traceback (most recent call last):
...
TypeError: pi must be an integer


==== Test for floats as values ====

>>> bg.integer_validator("money", 9.99)
Traceback (most recent call last):
...
TypeError: money must be an integer

>>> bg.integer_validator("pi", 3.14)
Traceback (most recent call last):
...
TypeError: pi must be an integer


==== Test for missing positional arguments ====

>>> bg.integer_validator()
Traceback (most recent call last):
...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> bg.integer_validator(name="math")
Traceback (most recent call last):
...
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> bg.integer_validator(value=78)
Traceback (most recent call last):
...
TypeError: integer_validator() missing 1 required positional argument: 'name'

==== Test for zero ====

>>> bg.integer_validator("science", 0)
Traceback (most recent call last):
...
ValueError: science must be greater than 0

==== Test for negative values ====

>>> bg.integer_validator("science", -9)
Traceback (most recent call last):
...
ValueError: science must be greater than 0

==== Test if module documentation exist ====

# At least the documentation should contain 5 words

>>> len(bg.__doc__.split()) > 5
True

==== Test if method documentation exist ====

# The method documentation should be descriptive enough, 10 words minimum is okay
>>> len(bg.integer_validator.__doc__.split()) > 10
True
