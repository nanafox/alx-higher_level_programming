>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

==== Test for expected behaviour ====

>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, 2)
[[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]
>>> matrix_divided(matrix, 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

# Ensure the original matrix wasn't modified
>>> matrix
[[1, 2, 3], [4, 5, 6]]

# Test with a little bit more complex matrix
>>> matrix_divided([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5)
[[0.2, 0.4, 0.6], [0.8, 1.0, 1.2], [1.4, 1.6, 1.8]]
>>> matrix_divided([[-4, 0.3, 10.21], [23, 5.6, -69.21], [-23, -8.1, 39]], 6)
[[-0.67, 0.05, 1.7], [3.83, 0.93, -11.53], [-3.83, -1.35, 6.5]]

==== Handle edge cases ====

# Zero division error
>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
...
ZeroDivisionError: division by zero

# Not a matrix
>>> matrix_divided([1, 2, 3, 4, 5, 6], 3)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided([], 3)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Matrix but contains invalid elements
>>> matrix_divided([["one", 2, 4, 5], [5, "4", 2]], 2)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Mismatching sizes
>>> matrix_divided([[1, 2, 3], [4, 5]], 5)
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size

# Invalid divisor
>>> matrix_divided(matrix, "2")
Traceback (most recent call last):
...
TypeError: div must be a number

# Missing positional arguments
>>> matrix_divided(matrix)
Traceback (most recent call last):
...
TypeError: matrix_divided() missing 1 required positional argument: 'div'

>>> matrix_divided()
Traceback (most recent call last):
...
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'
