>>> print_square = __import__('4-print_square').print_square

==== Test for expected behavior ====

>>> print_square(2)
##
##
>>> print_square(0)

# test with non-zero floating-point numbers
>>> print_square(5.33)
#####
#####
#####
#####
#####
>>> print_square(10.849)
##########
##########
##########
##########
##########
##########
##########
##########
##########
##########

==== Handle edge cases ====

# size is a float and less than zero
>>> print_square(-4.0)
Traceback (most recent call last):
...
TypeError: size must be an integer

# size is less than zero
>>> print_square(-3)
Traceback (most recent call last):
...
ValueError: size must be >= 0

# size is a non-integer
>>> print_square("5")
Traceback (most recent call last):
...
TypeError: size must be an integer

# a string is type casted to an integer which is valid
>>> print_square(int("5"))
#####
#####
#####
#####
#####

# try converting a string containing a float number to integer
>>> print_square(int("1.3"))
Traceback (most recent call last):
...
ValueError: invalid literal for int() with base 10: '1.3'

# try using a sequence
print_square([1, 2, 3])
Traceback (most recent call last):
...
TypeError: size must be an integer

# try with an infinite number
>>> print_square(float('inf'))
Traceback (most recent call last):
...
OverflowError: cannot convert float infinity to integer

# try with a NaN type
>>> print_square(float('nan'))
Traceback (most recent call last):
...
ValueError: cannot convert float NaN to integer
