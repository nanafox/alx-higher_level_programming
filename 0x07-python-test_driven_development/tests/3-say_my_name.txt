>>> say_my_name = __import__('3-say_my_name').say_my_name

==== Test for expected behaviour ====

>>> say_my_name("John", "Doe")
My name is John Doe
>>> say_my_name("John")
My name is John 
>>> say_my_name("John", "Smith")
My name is John Smith
>>> say_my_name("Bob")
My name is Bob 
>>> say_my_name("")
My name is  
>>> say_my_name("", "")
My name is  
>>> say_my_name(" ")
My name is   
>>> say_my_name(" ", " ")
My name is    

# Test for when the user really wants their name to
# be something other than a 'normal' string

>>> say_my_name(str(56), "Street")
My name is 56 Street
>>> say_my_name(str(['I', 'prefer', 'lists']), "in Python")
My name is ['I', 'prefer', 'lists'] in Python
>>> say_my_name("&@&", "()")
My name is &@& ()

==== Handle edge cases ====

# Invalid argument types
>>> say_my_name(7739)
Traceback (most recent call last):
...
TypeError: first_name must be a string
>>> say_my_name("Lina", 45)
Traceback (most recent call last):
...
TypeError: last_name must be a string
>>> say_my_name(12, 98)
Traceback (most recent call last):
...
TypeError: first_name must be a string
>>> say_my_name(None)
Traceback (most recent call last):
...
TypeError: first_name must be a string

# Missing positional argument
>>> say_my_name()
Traceback (most recent call last):
...
TypeError: say_my_name() missing 1 required positional argument: 'first_name'
